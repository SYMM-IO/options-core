// SPDX-License-Identifier: SYMM-Core-Business-Source-License-1.1
// This contract is licensed under the SYMM Core Business Source License 1.1
// Copyright (c) 2023 Symmetry Labs AG
// For more information, see https://docs.symm.io/legal-disclaimer/license
pragma solidity >=0.8.19;

import { IMultiAccount } from "../interfaces/IMultiAccount.sol";
import { ISignatureVerifier } from "../interfaces/ISignatureVerifier.sol";
import { AccessControl } from "@openzeppelin/contracts/access/AccessControl.sol";
import { IERC1271 } from "@openzeppelin/contracts/interfaces/IERC1271.sol";

/// @title SymmioPartyA Contract
/// @notice Account implementation for symmio platform
/// @dev Implements the ERC-1271 standard for contract-based signature validation
contract SymmioPartyA is AccessControl, IERC1271 {
	// ==================== STATE VARIABLES ====================

	/// @notice Address of the Symmio protocol contract
	address public symmioAddress;

	/// @notice Address of the MultiAccount contract that manages this Party A
	address public multiAccountAddress;

	// ======================= EVENTS =======================

	/// @notice Emitted when the Symmio address is updated
	/// @param oldSymmioContractAddress The address of the old Symmio contract
	/// @param newSymmioContractAddress The address of the new Symmio contract
	event SetSymmioAddress(address oldSymmioContractAddress, address newSymmioContractAddress);

	// ===================== MODIFIERS =====================

	/// @notice Ensures only the MultiAccount contract can call the function
	/// @param sender The address attempting to access the method
	modifier onlyMultiAccount(address sender) {
		require(multiAccountAddress == sender, "SymmioPartyA: only multiAccount can access this method");
		_;
	}

	// ===================== CONSTRUCTOR =====================

	/// @notice Constructor to initialize the contract with roles and addresses
	/// @dev Sets up the DEFAULT_ADMIN_ROLE and initializes contract addresses
	/// @param multiAccountAddress_ The address of the MultiAccount contract
	/// @param symmioAddress_ The address of the Symmio protocol contract
	constructor(address multiAccountAddress_, address symmioAddress_) {
		_grantRole(DEFAULT_ADMIN_ROLE, multiAccountAddress_);
		symmioAddress = symmioAddress_;
		multiAccountAddress = multiAccountAddress_;
	}

	// ================== ADMIN FUNCTIONS ==================

	/// @notice Updates the address of the Symmio contract
	/// @dev Can only be called by accounts with DEFAULT_ADMIN_ROLE
	/// @param symmioAddress_ The new address of the Symmio contract
	function setSymmioAddress(address symmioAddress_) external onlyRole(DEFAULT_ADMIN_ROLE) {
		emit SetSymmioAddress(symmioAddress, symmioAddress_);
		symmioAddress = symmioAddress_;
	}

	// =============== MULTIACCOUNT FUNCTIONS ===============

	/// @notice Executes a function call on the Symmio contract
	/// @dev Can only be called by the MultiAccount contract
	/// @param callData The data to be used for the function call
	/// @return success A boolean indicating whether the call was successful
	/// @return resultData The result data returned by the function call
	function call(bytes memory callData) external onlyMultiAccount(msg.sender) returns (bool success, bytes memory resultData) {
		return symmioAddress.call{ value: 0 }(callData);
	}

	// =============== ERC-1271 IMPLEMENTATION ===============

	/// @notice Verifies that the signer is the owner of the signing contract
	/// @dev This function implements EIP-1271 `isValidSignature` standard for contract-based signature validation
	/// @param hash The hash of the data signed
	/// @param signature The signature generated by the signer
	/// @return A magic value (0x1626ba7e) if the signature is valid, 0xffffffff otherwise
	function isValidSignature(bytes32 hash, bytes calldata signature) external view override returns (bytes4) {
		return IMultiAccount(multiAccountAddress).verifySignatureOfAccount(address(this), hash, signature);
	}
}
