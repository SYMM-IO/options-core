// SPDX-License-Identifier: SYMM-Core-Business-Source-License-1.1
// This contract is licensed under the SYMM Core Business Source License 1.1
// Copyright (c) 2023 Symmetry Labs AG
// For more information, see https://docs.symm.io/legal-disclaimer/license
pragma solidity >=0.8.18;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/interfaces/IERC1271.sol";
import "../interfaces/IMultiAccount.sol";
import "../storages/IntentStorage.sol";
import "../interfaces/ISignatureVerifier.sol";
import {IMultiAccount} from "../interfaces/IMultiAccount.sol";

contract SymmioPartyA is AccessControl, IERC1271{
    address public symmioAddress;
    address public multiAccountAddress;

    modifier onlyMultiAccount(address sender) {
        require(multiAccountAddress==sender, "SymmioPartyA: only multiAccount can access this method");
        _;
    }

    /**
     * @dev Constructor to initialize the contract with roles and Symmio address.
	 * @param admin The address of the default admin role.
	 * @param multiAccountAddress_ The address assigned the MULTIACCOUNT_ROLE.
	 * @param symmioAddress_ The address of the Symmio contract.
	 */
    constructor(address admin, address multiAccountAddress_, address symmioAddress_) {
        _grantRole(DEFAULT_ADMIN_ROLE, admin);
        symmioAddress = symmioAddress_;
        multiAccountAddress = multiAccountAddress_;
    }

    /**
     * @dev Emitted when the Symmio address is updated.
	 * @param oldSymmioContractAddress The address of the old Symmio contract.
	 * @param newSymmioContractAddress The address of the new Symmio contract.
	 */
    event SetSymmioAddress(address oldSymmioContractAddress, address newSymmioContractAddress);

    /**
     * @dev Updates the address of the Symmio contract.
	 * @param symmioAddress_ The new address of the Symmio contract.
	 */
    function setSymmioAddress(address symmioAddress_) external onlyRole(DEFAULT_ADMIN_ROLE) {
        emit SetSymmioAddress(symmioAddress, symmioAddress_);
        symmioAddress = symmioAddress_;
    }

    /**
     * @dev Executes a function call on the Symmio contract.
	 * @param _callData The data to be used for the function call.
	 * @return _success A boolean indicating whether the call was successful.
	 * @return _resultData The result data returned by the function call.
	 */
    function _call(bytes memory _callData) external onlyMultiAccount(msg.sender) returns (bool _success, bytes memory _resultData) {
        return symmioAddress.call{ value: 0 }(_callData);
    }

    /// @notice Verifies that the signer is the owner of the signing contract.
    /// @dev This function implements EIP-1271 `isValidSignature` standard for contract-based signature validation.
    /// @param hash The hash of the data signed.
    /// @param signature The signature generated by the signer.
    /// @return magicValue A magic value (0x1626ba7e) if the signature is valid, 0xffffffff otherwise.
    function isValidSignature(
        bytes32 hash,
        bytes calldata signature
    ) external override view returns (bytes4) {
        IntentStorage.Layout storage intentLayout = IntentStorage.layout(); //TODO: is it ok to use intentLayout?
        return ISignatureVerifier(intentLayout.signatureVerifier).isValidSignatureEIP1271(
            hash,
            signature,
            IMultiAccount(multiAccountAddress).owners(address(this))
        );
    }


}
